"""
Name of File: travel/views.py
Brief description of the file: determines what will be displayed when each of the functions in this file are called
Inputs: None
Outputs: Displays the HTML page
"""
from django.shortcuts import render
from .forms import RegionSelectionForm, TouristAttractionForm, GenerateScheduleForm
from .gpt_integration import display_regions, generate_text_with_gpt, recommend_tourist_attraction, generate_schedule
from .models import UserProfile

#function to display the region selection
def select_region(request):
	#if a form submission occurs
	if request.method == 'POST':
		#get the form submission data
		form = RegionSelectionForm(request.POST)
		#if there are no errors in the form
		if form.is_valid():
			#get all the inputs as a dictionary from the form data
			user_input = {field_name: form.cleaned_data[field_name] for field_name in RegionSelectionForm.option_list}

			#use the gpt function and display regions function to make a prompt from user_input and generate a response
			result = generate_text_with_gpt(display_regions(user_input))

			#get the current user
#			user_profile, created = UserProfile.objects.get_or_create(user=user)
			#set the current user's regions variable to be the result
#			user_profile.regions = result
			#save the current user
#			user_profile.save()
			
			#send back a result page that displays the result generated by GPT to the user based on their inputs
			return render(request, 'travel/result.html', {'result': result}) 
	#if the user has not submit the form
	else:
		#load the forms page for region selection
		form = RegionSelectionForm()
	#send to the user the select_region.html to be display on the browser, along with the proper forms for it
	return render(request, 'travel/select_region.html', {'form': form})


#function to recommend attractions
def recommend_attractions(request):
	#if a form submission occurs
	if request.method == 'POST':
		#get the form submission data
		form = TouristAttractionForm(request.POST)
		#if there are no errors in the form
		if form.is_valid():
			#get all the inputs as a dictionary from the form data
			user_input = {field_name: form.cleaned_data[field_name] for field_name in TouristAttractionForm.option_list}

			#separate the region input from the other options to be given separetly when making a prompt
			options = {key: values for key, values in user_input.items() if key != "region"}

			#get a prompt based on the user input, and use that prompt to give it to the GPT model to get a result
			result = generate_text_with_gpt(recommend_tourist_attraction(user_input["region"], options))

			#get the current user
#			user_profile, created = UserProfile.objects.get_or_create(user=user)
			#set the current user's attractions variable to be the result
#			user_profile.attractions = result
			#save the current user
#			user_profile.save()

			#send back a result page that displays the result generated by GPT to the user based on their inputs
			return render(request, 'travel/result.html', {'result': result}) 
	#if the user has not submit the form
	else:
		#load the forms page for tourist attraction
		form = TouristAttractionForm()

	#send to the user the recommend_tourist_attractions.html to be display on the browser, along with the proper forms for it
	return render(request, 'travel/recommend_tourist_attractions.html', {'form': form})


#function to make schedule
def make_schedule(request):
	#if a form submission occurs
	if request.method == 'POST':
		#get the form submission data
		form = GenerateScheduleForm(request.POST)
		#if there are no errors in the form
		if form.is_valid():
			#get all the inputs as a dictionary from the form data
			user_input = {field_name: form.cleaned_data[field_name] for field_name in GenerateScheduleForm.option_list}

			
			#separate the region and attractions input from the other options to be given separetly when making a prompt
			options = {key: values for key, values in user_input.items() if key != "region" and key != "attractions"}

			#make attractions option be a list for the generate_schedule function
			attractions = user_input["attractions"].split(", ")

			#get a prompt based on the user input, and use that prompt to give it to the GPT model to get a result
			result = generate_text_with_gpt(generate_schedule(user_input["region"], attractions, options))

			#send back a result page that displays the result generated by GPT to the user based on their inputs
			return render(request, 'travel/result.html', {'result': result}) 
	#if the user has not submit the form
	else:
		#load the forms page for generating a schedule
		form = GenerateScheduleForm()

	#send to the user the generate_schedule.html to be display on the browser, along with the proper forms for it
	return render(request, 'travel/generate_schedule.html', {'form': form})


#this allows for feedback and ratings submissions in the results page
def feedback_view(request):
	#if the user clicks submit
    if request.method == 'POST':
		#this gets the user's feedback
        feedback = request.POST.get('feedback')
		
		#this keeps them in the result page so they do not get redirected to another page
        return redirect('result')
