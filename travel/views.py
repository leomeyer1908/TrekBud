"""
Name of File: travel/views.py
Brief description of the file: determines what will be displayed when each of the functions in this file are called
Inputs: None
Outputs: Displays the HTML page
"""
from django.shortcuts import render, redirect 
from .forms import RegionSelectionForm, TouristAttractionForm, GenerateScheduleForm, RecommendRestaurantsForm
from .gpt_integration import display_regions, generate_text_with_gpt, recommend_tourist_attraction, generate_schedule
from accounts.models import UserProfile 
from django.contrib.auth.decorators import login_required
from .weather import get_weather
from .forms import WeatherForm
from datetime import timedelta, datetime

#make login required to update the user
@login_required(login_url='login')
#function to display the region selection
def select_region(request):
	#if a form submission occurs
	if request.method == 'POST':
		#get the form submission data
		form = RegionSelectionForm(request.POST)
		#if there are no errors in the form
		if form.is_valid():
			#Get user profile to be used to retrieve user info
			user_profile = UserProfile.objects.get(user=request.user)

			#get the proper appropriate personalized info from the user's account
			personalized_user_info = {
				"dietary_restrictions": user_profile.dietary_restrictions,
				"travel_style_preferences": user_profile.travel_style_preferences,
				"preferred_airlines": user_profile.preferred_airlines,
				"budget_constraints": user_profile.budget_constraints,
				"preferred_travel_dates": user_profile.preferred_travel_dates,
				"trip_duration": user_profile.trip_duration
			}

			#get all the inputs as a dictionary from the form data
			user_input = {field_name: form.cleaned_data[field_name] for field_name in RegionSelectionForm.option_list}

			#If the user did not specify another preference in the add the users default preference
			#Loop through each personalization in the personalize user info
			for key in personalized_user_info.keys():
				#If that personalization was not specificied in the current form
				if key not in user_input:
					#if the user preference has a value
					if personalized_user_info[key]:
						#add that to the current form
						user_input[key] = personalized_user_info[key]

			#use the gpt function and display regions function to make a prompt from user_input and generate a response
			result = generate_text_with_gpt(display_regions(user_input))

			#get each line of the result as a separate line to format it better
			results = result.split("\n")
			
			#send back a result page that displays the result generated by GPT to the user based on their inputs
			return render(request, 'travel/result.html', {'results': results}) 
	#if the user has not submit the form
	else:
		#load the forms page for region selection
		form = RegionSelectionForm()
	#send to the user the select_region.html to be display on the browser, along with the proper forms for it
	return render(request, 'travel/select_region.html', {'form': form})

#make login required to update the user
@login_required(login_url='login')
#function to recommend attractions
def recommend_attractions(request):
	#if a form submission occurs
	if request.method == 'POST':
		#get the form submission data
		form = TouristAttractionForm(request.POST)
		#if there are no errors in the form
		if form.is_valid():
			#Get user profile to be used to retrieve user info
			user_profile = UserProfile.objects.get(user=request.user)

			#get the proper appropriate personalized info from the user's account
			personalized_user_info = {
				"dietary_restrictions": user_profile.dietary_restrictions,
				"travel_style_preferences": user_profile.travel_style_preferences,
				"preferred_airlines": user_profile.preferred_airlines,
				"budget_constraints": user_profile.budget_constraints,
				"preferred_travel_dates": user_profile.preferred_travel_dates,
				"trip_duration": user_profile.trip_duration
			}

			#get all the inputs as a dictionary from the form data
			user_input = {field_name: form.cleaned_data[field_name] for field_name in form.fields}

			#separate the region input from the other options to be given separetly when making a prompt
			options = {key: values for key, values in user_input.items() if key != "region"}

			
			#If the user did not specify another preference in the add the users default preference
			#Loop through each personalization in the personalize user info
			for key in personalized_user_info.keys():
				#If that personalization was not specificied in the current form
				if key not in user_input:
					#if the user preference has a value
					if personalized_user_info[key]:
						#add that to the current form
						user_input[key] = personalized_user_info[key]

			#get a prompt based on the user input, and use that prompt to give it to the GPT model to get a result
			result = generate_text_with_gpt(recommend_tourist_attraction(user_input["region"], options))

			#get each line of the result as a separate line to format it better
			results = result.split("\n") 

			#send back a result page that displays the result generated by GPT to the user based on their inputs
			return render(request, 'travel/result.html', {'results': results}) 
	#if the user has not submit the form
	else:
		#load the forms page for tourist attraction
		form = TouristAttractionForm()

	#send to the user the recommend_tourist_attractions.html to be display on the browser, along with the proper forms for it
	return render(request, 'travel/recommend_tourist_attractions.html', {'form': form})

#make login required to update the user
@login_required(login_url='login')
#function to make schedule
def make_schedule(request):
	#if a form submission occurs
	if request.method == 'POST':
		#get the form submission data
		form = GenerateScheduleForm(request.POST)
		#if there are no errors in the form
		if form.is_valid():
			#Get user profile to be used to retrieve user info
			user_profile = UserProfile.objects.get(user=request.user)

			#get the proper appropriate personalized info from the user's account
			personalized_user_info = {
				"dietary_restrictions": user_profile.dietary_restrictions,
				"travel_style_preferences": user_profile.travel_style_preferences,
				"preferred_airlines": user_profile.preferred_airlines,
				"budget_constraints": user_profile.budget_constraints,
				"preferred_travel_dates": user_profile.preferred_travel_dates,
				"trip_duration": user_profile.trip_duration
			}

			#get all the inputs as a dictionary from the form data
			user_input = {field_name: form.cleaned_data[field_name] for field_name in form.fields}

			#If the user did not specify another preference in the add the users default preference
			#Loop through each personalization in the personalize user info
			for key in personalized_user_info.keys():
				#If that personalization was not specificied in the current form
				if key not in user_input:
					#if the user preference has a value
					if personalized_user_info[key]:
						#add that to the current form
						user_input[key] = personalized_user_info[key]

			#separate the region and attractions input from the other options to be given separetly when making a prompt
			options = {key: values for key, values in user_input.items() if key != "region" and key != "attractions"}

			#make attractions option be a list for the generate_schedule function
			attractions = user_input["attractions"].split(", ")

			#get a prompt based on the user input, and use that prompt to give it to the GPT model to get a result
			result = generate_text_with_gpt(generate_schedule(user_input["region"], attractions, options))

			#get each line of the result as a separate line to format it better
			results = result.split("\n")

			#send back a result page that displays the result generated by GPT to the user based on their inputs
			return render(request, 'travel/result.html', {'results': results}) 
	#if the user has not submit the form
	else:
		#load the forms page for generating a schedule
		form = GenerateScheduleForm()

	#send to the user the generate_schedule.html to be display on the browser, along with the proper forms for it
	return render(request, 'travel/generate_schedule.html', {'form': form})

#make login required to update the user
@login_required(login_url='login')
#function to make schedule
def recommend_restaurants(request):
	#if a form submission occurs
	if request.method == 'POST':
		#get the form submission data
		form = RecommendRestaurantsForm(request.POST)
		#if there are no errors in the form
		if form.is_valid():
			#Get user profile to be used to retrieve user info
			user_profile = UserProfile.objects.get(user=request.user)

			#get the proper appropriate personalized info from the user's account
			personalized_user_info = {
				"dietary_restrictions": user_profile.dietary_restrictions,
				"travel_style_preferences": user_profile.travel_style_preferences,
				"budget_constraints": user_profile.budget_constraints,
				"preferred_travel_dates": user_profile.preferred_travel_dates,
				"trip_duration": user_profile.trip_duration
			}

			#get all the inputs as a dictionary from the form data
			user_input = {field_name: form.cleaned_data[field_name] for field_name in form.fields}

			#If the user did not specify another preference in the add the users default preference
			#Loop through each personalization in the personalize user info
			for key in personalized_user_info.keys():
				#If that personalization was not specificied in the current form
				if key not in user_input:
					#if the user preference has a value
					if personalized_user_info[key]:
						#add that to the current form
						user_input[key] = personalized_user_info[key]

			#separate the region and attractions input from the other options to be given separetly when making a prompt
			options = {key: values for key, values in user_input.items() if key != "region"}

			#get a prompt based on the user input, and use that prompt to give it to the GPT model to get a result
			#result = generate_text_with_gpt(generate_schedule(user_input["region"], options))

			#get each line of the result as a separate line to format it better
			#results = result.split("\n")

			#send back a result page that displays the result generated by GPT to the user based on their inputs
			#return render(request, 'travel/result.html', {'results': results}) 
	#if the user has not submit the form
	else:
		#load the forms page for generating a schedule
		form = RecommendRestaurantsForm()

	#send to the user the generate_schedule.html to be display on the browser, along with the proper forms for it
	return render(request, 'travel/recommend_restaurants.html', {'form': form})

#this allows for feedback and ratings submissions in the results page
def feedback_view(request):
	#if the user clicks submit
    if request.method == 'POST':
		#this gets the user's feedback
        feedback = request.POST.get('feedback')
		
		#this keeps them in the result page so they do not get redirected to another page
        return redirect('result')
	

def weather_forecast(request):
    weather_data = None

    if request.method == 'POST':
        form = WeatherForm(request.POST)

        if form.is_valid():
            region = form.cleaned_data['region']
            start_date = form.cleaned_data['start_date']
            end_date = form.cleaned_data['end_date']
            unit = form.cleaned_data['unit']
            weather_data = get_weather(region, start_date, end_date, unit)

    else:
        form = WeatherForm()

    return render(request, 'travel/weather_forecast.html', {'form': form, 'weather_data': weather_data})
